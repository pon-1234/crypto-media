name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter (ESLint)
        run: pnpm lint

      - name: Run formatter check (Prettier)
        run: pnpm format --check

      - name: Run type check (TypeScript)
        run: pnpm typecheck

      - name: Run tests with coverage
        run: |
          # „Ç´„Éê„É¨„ÉÉ„Ç∏„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰∫ãÂâç„Å´‰ΩúÊàê
          mkdir -p coverage/jsdom coverage/node
          
          # JSDOM„ÉÜ„Çπ„Éà„Å®Node„ÉÜ„Çπ„Éà„Çí‰∏¶ÂàóÂÆüË°å
          pnpm test:ci:jsdom &
          JSDOM_PID=$!
          pnpm test:ci:node &
          NODE_PID=$!
          
          # ‰∏°Êñπ„ÅÆ„ÉÜ„Çπ„Éà„ÅåÂÆå‰∫Ü„Åô„Çã„Åæ„ÅßÂæÖÊ©ü
          wait $JSDOM_PID
          JSDOM_EXIT=$?
          wait $NODE_PID
          NODE_EXIT=$?
          
          # „ÅÑ„Åö„Çå„Åã„ÅÆ„ÉÜ„Çπ„Éà„ÅåÂ§±Êïó„Åó„ÅüÂ†¥Âêà„ÅØ„Ç®„É©„Éº
          if [ $JSDOM_EXIT -ne 0 ] || [ $NODE_EXIT -ne 0 ]; then
            echo "Tests failed"
            exit 1
          fi
          
          # „Ç´„Éê„É¨„ÉÉ„Ç∏„Çí„Éû„Éº„Ç∏
          pnpm test:ci:merge-coverage
        env:
          CI: true
          NODE_ENV: test
          # „ÉÜ„Çπ„ÉàÁî®„ÅÆÁí∞Â¢ÉÂ§âÊï∞Ôºà„É¢„ÉÉ„ÇØÂÄ§„ÅßÂïèÈ°å„Å™„ÅÑÔºâ
          NEXT_PUBLIC_FIREBASE_API_KEY: test-api-key
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: test-auth-domain
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: test-project-id
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: test-storage-bucket
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: test-sender-id
          NEXT_PUBLIC_FIREBASE_APP_ID: test-app-id
          FIREBASE_ADMIN_PROJECT_ID: test-admin-project-id
          FIREBASE_ADMIN_CLIENT_EMAIL: test@example.com
          FIREBASE_ADMIN_PRIVATE_KEY: test-private-key
          MICROCMS_SERVICE_DOMAIN: test-service
          MICROCMS_API_KEY: test-api-key
          STRIPE_SECRET_KEY: test-stripe-key
          STRIPE_WEBHOOK_SECRET: test-webhook-secret
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: test-publishable-key
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret
          GOOGLE_CLIENT_ID: test-google-client-id
          GOOGLE_CLIENT_SECRET: test-google-client-secret
          SENDGRID_API_KEY: sg_test_dummy_key

      - name: Display coverage summary
        run: |
          # „Ç´„Éê„É¨„ÉÉ„Ç∏ÁµêÊûú„ÇíË°®Á§∫ÔºàVitest„ÅåÈñæÂÄ§„ÉÅ„Çß„ÉÉ„ÇØ„ÇíËá™ÂãïÁöÑ„Å´ÂÆüË°åÔºâ
          if [ -f coverage/coverage-summary.json ]; then
            echo "üìä Coverage Summary:"
            cat coverage/coverage-summary.json | jq -r '.total | "- Statements: \(.statements.covered)/\(.statements.total) (\(.statements.pct)%)\n- Branches: \(.branches.covered)/\(.branches.total) (\(.branches.pct)%)\n- Functions: \(.functions.covered)/\(.functions.total) (\(.functions.pct)%)\n- Lines: \(.lines.covered)/\(.lines.total) (\(.lines.pct)%)"'
            echo ""
            echo "‚úÖ Vitest has automatically verified that coverage meets the required thresholds (100%)."
          else
            echo "Coverage summary not found. Check the test output above for details."
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  lighthouse:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          CI: true
          NODE_ENV: production
          # „ÉÜ„Çπ„ÉàÁî®„ÅÆÁí∞Â¢ÉÂ§âÊï∞
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
          FIREBASE_ADMIN_PROJECT_ID: ${{ secrets.FIREBASE_ADMIN_PROJECT_ID }}
          FIREBASE_ADMIN_CLIENT_EMAIL: ${{ secrets.FIREBASE_ADMIN_CLIENT_EMAIL }}
          FIREBASE_ADMIN_PRIVATE_KEY: ${{ secrets.FIREBASE_ADMIN_PRIVATE_KEY }}
          MICROCMS_SERVICE_DOMAIN: ${{ secrets.MICROCMS_SERVICE_DOMAIN }}
          MICROCMS_API_KEY: ${{ secrets.MICROCMS_API_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/media
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: ./.lighthouserc.json

      - name: Format Lighthouse results
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(
              fs.readFileSync('${{ steps.lighthouse.outputs.resultsPath }}', 'utf8')
            );

            const formatResult = (result) => {
              const { audits } = result;
              const metrics = {
                'largest-contentful-paint': 'LCP',
                'cumulative-layout-shift': 'CLS',
                'first-input-delay': 'FID',
                'performance-score': 'Performance'
              };
              
              let comment = `### Lighthouse Results for ${result.finalUrl}\n\n`;
              comment += '| Metric | Value | Status |\n';
              comment += '|--------|-------|--------|\n';
              
              for (const [key, label] of Object.entries(metrics)) {
                if (audits[key]) {
                  const audit = audits[key];
                  const passed = audit.score === 1;
                  const status = passed ? '‚úÖ' : '‚ùå';
                  comment += `| ${label} | ${audit.displayValue || audit.score} | ${status} |\n`;
                }
              }
              
              return comment;
            };

            const comment = results.map(formatResult).join('\n');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          CI: true
          NODE_ENV: production
          # „Éì„É´„ÉâÁî®„ÅÆÁí∞Â¢ÉÂ§âÊï∞Ôºà„Ç∑„Éº„ÇØ„É¨„ÉÉ„Éà„Åã„ÇâÂèñÂæóÔºâ
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
          FIREBASE_ADMIN_PROJECT_ID: ${{ secrets.FIREBASE_ADMIN_PROJECT_ID }}
          FIREBASE_ADMIN_CLIENT_EMAIL: ${{ secrets.FIREBASE_ADMIN_CLIENT_EMAIL }}
          FIREBASE_ADMIN_PRIVATE_KEY: ${{ secrets.FIREBASE_ADMIN_PRIVATE_KEY }}
          MICROCMS_SERVICE_DOMAIN: ${{ secrets.MICROCMS_SERVICE_DOMAIN }}
          MICROCMS_API_KEY: ${{ secrets.MICROCMS_API_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

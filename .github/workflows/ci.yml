name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Git履歴をすべて取得（変更検出のため）

      - name: Setup pnpm
        uses: pnpm/action-setup@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter (ESLint)
        run: pnpm lint

      - name: Run formatter check (Prettier)
        run: pnpm format --check

      - name: Run type check (TypeScript)
        run: pnpm typecheck

      - name: Setup test environment
        run: cp .env.test .env

      - name: Run tests with coverage
        run: pnpm test:ci

      - name: Display coverage summary
        run: |
          # カバレッジ結果を表示（Vitestが閾値チェックを自動的に実行）
          if [ -f coverage/coverage-summary.json ]; then
            echo "📊 Coverage Summary:"
            cat coverage/coverage-summary.json | jq -r '.total | "- Statements: \(.statements.covered)/\(.statements.total) (\(.statements.pct)%)\n- Branches: \(.branches.covered)/\(.branches.total) (\(.branches.pct)%)\n- Functions: \(.functions.covered)/\(.functions.total) (\(.functions.pct)%)\n- Lines: \(.lines.covered)/\(.lines.total) (\(.lines.pct)%)"'
            echo ""
            echo "✅ Vitest has automatically verified that coverage meets the required thresholds (100%)."
          else
            echo "Coverage summary not found. Check the test output above for details."
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  build-and-lighthouse:
    name: Build and Lighthouse
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    # 本番ビルドとLighthouseで使用する環境変数をここでまとめて定義
    env:
      CI: true
      NODE_ENV: production
      # ビルドに必要なすべてのシークレットをここで設定
      NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
      NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
      NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
      NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
      NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
      NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
      FIREBASE_ADMIN_PROJECT_ID: ${{ secrets.FIREBASE_ADMIN_PROJECT_ID }}
      FIREBASE_ADMIN_CLIENT_EMAIL: ${{ secrets.FIREBASE_ADMIN_CLIENT_EMAIL }}
      FIREBASE_ADMIN_PRIVATE_KEY: ${{ secrets.FIREBASE_ADMIN_PRIVATE_KEY }}
      MICROCMS_SERVICE_DOMAIN: ${{ secrets.MICROCMS_SERVICE_DOMAIN }}
      MICROCMS_API_KEY: ${{ secrets.MICROCMS_API_KEY }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
      NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
      NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Git履歴をすべて取得（変更検出のため）

      - name: Setup pnpm
        uses: pnpm/action-setup@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup build environment
        run: cp .env.test .env

      - name: Build application
        run: pnpm build

      # Lighthouse CI (PR時のみ実行)
      - name: Run Lighthouse CI
        if: github.event_name == 'pull_request'
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/media
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: ./.lighthouserc.json


name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter (ESLint)
        run: pnpm lint

      - name: Run formatter check (Prettier)
        run: pnpm format --check

      - name: Run type check (TypeScript)
        run: pnpm typecheck

      - name: Run tests with coverage
        run: pnpm test:run --coverage
        env:
          CI: true
          NODE_ENV: test
          # テスト用の環境変数（モック値で問題ない）
          NEXT_PUBLIC_FIREBASE_API_KEY: test-api-key
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: test-auth-domain
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: test-project-id
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: test-storage-bucket
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: test-sender-id
          NEXT_PUBLIC_FIREBASE_APP_ID: test-app-id
          FIREBASE_ADMIN_PROJECT_ID: test-admin-project-id
          FIREBASE_ADMIN_CLIENT_EMAIL: test@example.com
          FIREBASE_ADMIN_PRIVATE_KEY: test-private-key
          MICROCMS_SERVICE_DOMAIN: test-service
          MICROCMS_API_KEY: test-api-key
          STRIPE_SECRET_KEY: test-stripe-key
          STRIPE_WEBHOOK_SECRET: test-webhook-secret
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: test-publishable-key
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret
          GOOGLE_CLIENT_ID: test-google-client-id
          GOOGLE_CLIENT_SECRET: test-google-client-secret

      - name: Check test coverage
        run: |
          # カバレッジ結果を確認（前のステップで既に実行済み）
          if [ -f coverage/coverage-summary.json ]; then
            echo "Coverage summary file found."
            echo "File size: $(ls -lh coverage/coverage-summary.json | awk '{print $5}')"
            echo "First 500 characters of coverage-summary.json:"
            head -c 500 coverage/coverage-summary.json
            echo ""
            echo ""
            
            # JSONの構造を確認
            echo "JSON structure check:"
            cat coverage/coverage-summary.json | jq -r '.total' | head -10
            echo ""
            
            # jqを使用して安全にJSONを解析
            COVERAGE_DATA=$(cat coverage/coverage-summary.json)
            
            # パーセンテージ値を抽出
            STATEMENTS_PCT=$(echo "$COVERAGE_DATA" | jq -r '.total.statements.pct // 0')
            BRANCHES_PCT=$(echo "$COVERAGE_DATA" | jq -r '.total.branches.pct // 0')
            FUNCTIONS_PCT=$(echo "$COVERAGE_DATA" | jq -r '.total.functions.pct // 0')
            LINES_PCT=$(echo "$COVERAGE_DATA" | jq -r '.total.lines.pct // 0')
            
            echo "Extracted percentages:"
            echo "STATEMENTS_PCT=$STATEMENTS_PCT"
            echo "BRANCHES_PCT=$BRANCHES_PCT"
            echo "FUNCTIONS_PCT=$FUNCTIONS_PCT"  
            echo "LINES_PCT=$LINES_PCT"
            echo ""
            
            # カバー数と総数を抽出
            STATEMENTS_COVERED=$(echo "$COVERAGE_DATA" | jq -r '.total.statements.covered // 0')
            STATEMENTS_TOTAL=$(echo "$COVERAGE_DATA" | jq -r '.total.statements.total // 0')
            BRANCHES_COVERED=$(echo "$COVERAGE_DATA" | jq -r '.total.branches.covered // 0')
            BRANCHES_TOTAL=$(echo "$COVERAGE_DATA" | jq -r '.total.branches.total // 0')
            FUNCTIONS_COVERED=$(echo "$COVERAGE_DATA" | jq -r '.total.functions.covered // 0')
            FUNCTIONS_TOTAL=$(echo "$COVERAGE_DATA" | jq -r '.total.functions.total // 0')
            LINES_COVERED=$(echo "$COVERAGE_DATA" | jq -r '.total.lines.covered // 0')
            LINES_TOTAL=$(echo "$COVERAGE_DATA" | jq -r '.total.lines.total // 0')
            
            echo "Coverage Report:"
            echo "- Statements: $STATEMENTS_COVERED/$STATEMENTS_TOTAL ($STATEMENTS_PCT%)"
            echo "- Branches: $BRANCHES_COVERED/$BRANCHES_TOTAL ($BRANCHES_PCT%)"
            echo "- Functions: $FUNCTIONS_COVERED/$FUNCTIONS_TOTAL ($FUNCTIONS_PCT%)"
            echo "- Lines: $LINES_COVERED/$LINES_TOTAL ($LINES_PCT%)"
            
            # カバレッジのチェック（awkを使用して浮動小数点比較）
            # 闾値: lines=93%, functions=98%, branches=93%, statements=93%
            CHECK_PASSED=true
            
            if awk -v pct="$STATEMENTS_PCT" 'BEGIN { if (pct >= 93) exit 0; else exit 1 }'; then
              echo "✓ Statements coverage: $STATEMENTS_PCT%"
            else
              CHECK_PASSED=false
              echo "Statements coverage is below 93%: $STATEMENTS_PCT%"
            fi
            
            if awk -v pct="$BRANCHES_PCT" 'BEGIN { if (pct >= 93) exit 0; else exit 1 }'; then
              echo "✓ Branches coverage: $BRANCHES_PCT%"
            else
              CHECK_PASSED=false
              echo "Branches coverage is below 93%: $BRANCHES_PCT%"
            fi
            
            if awk -v pct="$FUNCTIONS_PCT" 'BEGIN { if (pct >= 98) exit 0; else exit 1 }'; then
              echo "✓ Functions coverage: $FUNCTIONS_PCT%"
            else
              CHECK_PASSED=false
              echo "Functions coverage is below 98%: $FUNCTIONS_PCT%"
            fi
            
            if awk -v pct="$LINES_PCT" 'BEGIN { if (pct >= 93) exit 0; else exit 1 }'; then
              echo "✓ Lines coverage: $LINES_PCT%"
            else
              CHECK_PASSED=false
              echo "Lines coverage is below 93%: $LINES_PCT%"
            fi
            
            if [ "$CHECK_PASSED" = true ]; then
              echo "✅ Coverage check passed - Required thresholds achieved!"
            else
              echo "❌ Coverage check failed - Required thresholds not met!"
              exit 1
            fi
          else
            echo "❌ Coverage file not found!"
            exit 1
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  lighthouse:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          CI: true
          NODE_ENV: production
          # テスト用の環境変数
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
          FIREBASE_ADMIN_PROJECT_ID: ${{ secrets.FIREBASE_ADMIN_PROJECT_ID }}
          FIREBASE_ADMIN_CLIENT_EMAIL: ${{ secrets.FIREBASE_ADMIN_CLIENT_EMAIL }}
          FIREBASE_ADMIN_PRIVATE_KEY: ${{ secrets.FIREBASE_ADMIN_PRIVATE_KEY }}
          MICROCMS_SERVICE_DOMAIN: ${{ secrets.MICROCMS_SERVICE_DOMAIN }}
          MICROCMS_API_KEY: ${{ secrets.MICROCMS_API_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/media
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: ./.lighthouserc.json

      - name: Format Lighthouse results
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(
              fs.readFileSync('${{ steps.lighthouse.outputs.resultsPath }}', 'utf8')
            );

            const formatResult = (result) => {
              const { audits } = result;
              const metrics = {
                'largest-contentful-paint': 'LCP',
                'cumulative-layout-shift': 'CLS',
                'first-input-delay': 'FID',
                'performance-score': 'Performance'
              };
              
              let comment = `### Lighthouse Results for ${result.finalUrl}\n\n`;
              comment += '| Metric | Value | Status |\n';
              comment += '|--------|-------|--------|\n';
              
              for (const [key, label] of Object.entries(metrics)) {
                if (audits[key]) {
                  const audit = audits[key];
                  const passed = audit.score === 1;
                  const status = passed ? '✅' : '❌';
                  comment += `| ${label} | ${audit.displayValue || audit.score} | ${status} |\n`;
                }
              }
              
              return comment;
            };

            const comment = results.map(formatResult).join('\n');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          CI: true
          NODE_ENV: production
          # ビルド用の環境変数（シークレットから取得）
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
          FIREBASE_ADMIN_PROJECT_ID: ${{ secrets.FIREBASE_ADMIN_PROJECT_ID }}
          FIREBASE_ADMIN_CLIENT_EMAIL: ${{ secrets.FIREBASE_ADMIN_CLIENT_EMAIL }}
          FIREBASE_ADMIN_PRIVATE_KEY: ${{ secrets.FIREBASE_ADMIN_PRIVATE_KEY }}
          MICROCMS_SERVICE_DOMAIN: ${{ secrets.MICROCMS_SERVICE_DOMAIN }}
          MICROCMS_API_KEY: ${{ secrets.MICROCMS_API_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
